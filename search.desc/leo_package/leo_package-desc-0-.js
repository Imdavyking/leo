searchState.loadedDescShard("leo_package", 0, "leo-package\nCreates a directory at the provided path with the default …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the path to the build directory if it exists.\nRemoves the directory at the provided path.\nCreates a directory at the provided path with the default …\nReturns a list of files in the imports directory.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the imports directory does not exist or …\nRemoves the directory at the provided path.\nCreates a directory at the provided path with the default …\nReturns a list of files in the input directory.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe serialized struct output file.\nThe build checksum file.\nThe serialized struct output file.\nEnum to handle all 3 types of snapshots.\nGeneric Snapshot file wrapper. Each package can have up to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads the serialized struct from the given file path if it …\nRemoves the serialized struct at the given path if it …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads the checksum from the given file path if it exists.\nRemoves the checksum at the given path if it exists. …\nWrites the given checksum to a file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads the serialized struct from the given file path if it …\nRemoves the serialized struct at the given path if it …\nWrites the given serialized struct to a file.\nCreates a directory at the provided path with the default …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRemoves the directory at the provided path.\nReturns <code>true</code> if a package is can be initialized at a given …\nReturns the argument unchanged.\nCreates a Leo package at the given path\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if it is a valid Aleo name.\nReturns <code>true</code> if a package is initialized at the given path\nThe <code>.env</code> file.\nThe <code>.gitignore</code> file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>main.leo</code> file.\nCheck that the files in the source directory are valid.\nCreates a directory at the provided path with the default …\nReturns a list of files in the source directory.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")